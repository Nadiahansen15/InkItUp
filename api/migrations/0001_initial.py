# Generated by Django 3.2.9 on 2021-11-14 17:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tattooparlor',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cvr', models.IntegerField(db_column='CVR', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=75, null=True)),
                ('adress', models.CharField(blank=True, db_column='Adress', max_length=45, null=True)),
                ('phonenumber', models.IntegerField(blank=True, db_column='PhoneNumber', null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=45, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'tattooparlor',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('idappointment', models.IntegerField(db_column='idAppointment', primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(blank=True, db_column='DateTime', null=True)),
                ('sessionlenght', models.IntegerField(blank=True, db_column='SessionLenght', null=True)),
            ],
            options={
                'db_table': 'appointment',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('cpr', models.IntegerField(db_column='CPR', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=45, null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=45, null=True)),
                ('phonenumber', models.IntegerField(blank=True, db_column='PhoneNumber', null=True)),
                ('registered', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='Ink',
            fields=[
                ('batchnumber', models.IntegerField(db_column='BatchNumber', primary_key=True, serialize=False)),
                ('brand', models.CharField(blank=True, db_column='Brand', max_length=45, null=True)),
                ('colorcode', models.CharField(blank=True, db_column='ColorCode', max_length=15, null=True)),
                ('experationdate', models.DateTimeField(blank=True, db_column='ExperationDate', null=True)),
                ('price', models.IntegerField(blank=True, db_column='Price', null=True)),
            ],
            options={
                'db_table': 'ink',
            },
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('cvr', models.IntegerField(db_column='CVR', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=45, null=True)),
                ('phonenumber', models.IntegerField(blank=True, db_column='PhoneNumber', null=True)),
                ('adress', models.CharField(blank=True, db_column='Adress', max_length=45, null=True)),
            ],
            options={
                'db_table': 'producer',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('cvr', models.IntegerField(db_column='CVR', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=45, null=True)),
                ('phonenumber', models.CharField(blank=True, db_column='PhoneNumber', max_length=45, null=True)),
                ('adress', models.CharField(blank=True, db_column='Adress', max_length=45, null=True)),
            ],
            options={
                'db_table': 'supplier',
            },
        ),
        migrations.CreateModel(
            name='Tattoo',
            fields=[
                ('idtattoo', models.AutoField(db_column='idTattoo', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True)),
                ('placementonbody', models.CharField(blank=True, db_column='PlacementOnBody', max_length=45, null=True)),
                ('appointment_idappointment', models.ForeignKey(db_column='Appointment_idAppointment', on_delete=django.db.models.deletion.CASCADE, to='api.appointment')),
            ],
            options={
                'db_table': 'tattoo',
                'unique_together': {('idtattoo', 'appointment_idappointment')},
            },
        ),
        migrations.CreateModel(
            name='ParlorHasInk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(blank=True, db_column='Quantity', null=True)),
                ('ink_batchnumber', models.ForeignKey(blank=True, db_column='Ink_batchnumber', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.ink')),
                ('parlor_storageid', models.ForeignKey(blank=True, db_column='Parlor_storageID', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'parlor_has_ink',
            },
        ),
        migrations.AddField(
            model_name='ink',
            name='producer_cvr',
            field=models.ForeignKey(db_column='Producer_CVR', on_delete=django.db.models.deletion.CASCADE, to='api.producer'),
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('cpr', models.IntegerField(db_column='CPR', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=45, null=True)),
                ('phonenumber', models.IntegerField(blank=True, db_column='PhoneNumber', null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=45, null=True)),
                ('price', models.IntegerField(blank=True, db_column='Price', null=True)),
                ('tattooparlor_cvr', models.ForeignKey(db_column='Tattooparlor_CVR', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'artist',
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='artist_cpr',
            field=models.ForeignKey(db_column='Artist_CPR', on_delete=django.db.models.deletion.CASCADE, to='api.artist'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='customer_cpr',
            field=models.ForeignKey(db_column='Customer_CPR', on_delete=django.db.models.deletion.CASCADE, to='api.customer'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='tattooparlor_cvr',
            field=models.ForeignKey(db_column='Tattooparlor_CVR', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tattooparlor',
            name='supplier_cvr',
            field=models.ForeignKey(db_column='Supplier_CVR', on_delete=django.db.models.deletion.CASCADE, to='api.supplier'),
        ),
        migrations.AddField(
            model_name='tattooparlor',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='ink',
            unique_together={('batchnumber', 'producer_cvr')},
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together={('idappointment', 'customer_cpr', 'tattooparlor_cvr')},
        ),
        migrations.AlterUniqueTogether(
            name='tattooparlor',
            unique_together={('cvr', 'supplier_cvr')},
        ),
        migrations.CreateModel(
            name='TattooHasInk',
            fields=[
                ('tattoo_idtattoo', models.OneToOneField(db_column='Tattoo_idTattoo', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.tattoo')),
                ('ink_batchnumber', models.ForeignKey(db_column='Ink_BatchNumber', on_delete=django.db.models.deletion.CASCADE, to='api.ink')),
            ],
            options={
                'db_table': 'tattoo_has_ink',
                'unique_together': {('tattoo_idtattoo', 'ink_batchnumber')},
            },
        ),
        migrations.CreateModel(
            name='ProducerHasSupplier',
            fields=[
                ('producer_cvr', models.OneToOneField(db_column='Producer_CVR', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.producer')),
                ('supplier_cvr', models.ForeignKey(db_column='Supplier_CVR', on_delete=django.db.models.deletion.CASCADE, to='api.supplier')),
            ],
            options={
                'db_table': 'producer_has_supplier',
                'unique_together': {('producer_cvr', 'supplier_cvr')},
            },
        ),
    ]
